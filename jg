import os
import boto3

# Initialize S3 client
s3_client = boto3.client('s3')

def ensure_directory_exists(directory):
    print(f"Ensuring directory exists for: {directory}")
    if not os.path.exists(directory):
        print(f"Directory does not exist. Creating directory: {directory}")
        os.makedirs(directory)
    else:
        print(f"Directory already exists: {directory}")

def download_file_from_s3(bucket_name, s3_key, local_dir):
    ensure_directory_exists(local_dir)
    local_file_path = os.path.join(local_dir, os.path.basename(s3_key))
    print(f"Downloading file from S3: Bucket={bucket_name}, Key={s3_key}, LocalPath={local_file_path}")
    s3_client.download_file(bucket_name, s3_key, local_file_path)
    print(f"Downloaded file from S3 to {local_file_path}")
    return local_file_path

def get_latest_file_from_s3(bucket_name, prefix):
    print(f"Listing objects in S3: Bucket={bucket_name}, Prefix={prefix}")
    response = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
    if 'Contents' not in response:
        raise ValueError("No files found in the bucket.")
    
    files = response['Contents']
    latest_file = max(files, key=lambda x: x['LastModified'])
    print(f"Latest file in S3: {latest_file['Key']}")
    return latest_file['Key']

# Example usage
if __name__ == '__main__':
    import argparse

    # Argparsing
    parser = argparse.ArgumentParser(description='Download latest file from S3.')
    parser.add_argument('--bucket_name', type=str, required=True, help='The S3 bucket name.')
    parser.add_argument('--input_s3_prefix', type=str, required=True, help='The S3 prefix for the input images.')
    parser.add_argument('--local_dir', type=str, required=True, help='The local directory to save the downloaded image.')
    args = parser.parse_args()

    bucket_name = args.bucket_name
    prefix = args.input_s3_prefix
    local_dir = args.local_dir

    latest_file_key = get_latest_file_from_s3(bucket_name, prefix)
    local_image_path = download_file_from_s3(bucket_name, latest_file_key, local_dir)
    print(f"File downloaded to: {local_image_path}")






#!/bin/bash

# Directory to check for files
DIRECTORY="/var/snap/amazon-ssm-agent/7993/imgfiles"

# Check if any file exists in the directory
if [ "$(ls -A $DIRECTORY)" ]; then
  echo "Files found in $DIRECTORY. They will be deleted after running the script."
  FILE_EXISTS=true
else
  echo "No files found in $DIRECTORY."
  FILE_EXISTS=false
fi

# Run your main script (replace 'your_main_script.py' with the actual script name)
python3 your_main_script.py --bucket_name your_bucket_name --input_s3_prefix your_prefix --local_dir $DIRECTORY --model_path your_model_path

# Check the exit status of your main script
if [ $? -eq 0 ]; then
  echo "Main script executed successfully."
  # If files were found before running the main script, delete them
  if [ "$FILE_EXISTS" = true ]; then
    echo "Deleting files in $DIRECTORY."
    rm -f $DIRECTORY/*
    echo "Files deleted."
  fi
else
  echo "Main script encountered an error."
  exit 1
fi

# Optionally, you can include additional cleanup or logging here

echo "Script execution completed."

